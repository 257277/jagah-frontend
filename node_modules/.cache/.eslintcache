[{"/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/index.js":"1","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/reportWebVitals.js":"2","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/App.js":"3","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/Routes/AllRoutes.jsx":"4","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/login-signup.jsx":"5","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/home.jsx":"6","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/navbar.jsx":"7","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/footer.jsx":"8","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/hotel.jsx":"9","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/booking.jsx":"10","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/property.jsx":"11","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/addProperty.jsx":"12","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/SeeSelfproperty.jsx":"13"},{"size":632,"mtime":1689840430516,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1689839782164,"results":"16","hashOfConfig":"15"},{"size":298,"mtime":1689842470350,"results":"17","hashOfConfig":"15"},{"size":1391,"mtime":1690045264917,"results":"18","hashOfConfig":"15"},{"size":5166,"mtime":1690131380401,"results":"19","hashOfConfig":"15"},{"size":1135,"mtime":1690128018937,"results":"20","hashOfConfig":"15"},{"size":1871,"mtime":1690130675679,"results":"21","hashOfConfig":"15"},{"size":2734,"mtime":1690127739987,"results":"22","hashOfConfig":"15"},{"size":5261,"mtime":1690133871874,"results":"23","hashOfConfig":"15"},{"size":3924,"mtime":1690131441092,"results":"24","hashOfConfig":"15"},{"size":4805,"mtime":1690134472645,"results":"25","hashOfConfig":"15"},{"size":4201,"mtime":1690131487673,"results":"26","hashOfConfig":"15"},{"size":4112,"mtime":1690131465746,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"11qdalh",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"31"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"31"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"31"},"/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/index.js",[],[],[],"/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/reportWebVitals.js",[],[],"/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/App.js",[],[],"/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/Routes/AllRoutes.jsx",[],[],"/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/login-signup.jsx",[],[],"/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/home.jsx",[],[],"/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/navbar.jsx",["74","75"],[],"import React, { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport styles from './navbar.module.css';\n\nexport default function Navbar() {\n  const [name, setName] = useState('');\n  const [id, setId] = useState('');\n  const [token, setToken] = useState('');\n\n  useEffect(() => {\n    // Check if there's a token in sessionStorage\n    const storedToken = JSON.parse(sessionStorage.getItem('token'));\n    if (storedToken) {\n      setName(JSON.parse(sessionStorage.getItem('name')));\n      setId(JSON.parse(sessionStorage.getItem('id')));\n      setToken(storedToken);\n    }\n  }, []);\n\n  // Function to handle logout\n  const handleLogout = () => {\n    // Clear sessionStorage\n    sessionStorage.clear();\n    // Reset the state values\n    setName('');\n    setId('');\n    setToken('');\n    // Navigate to the home page after logout\n    navigate(\"/\");\n  };\n\n  // Use the useNavigate hook to get the navigate function\n  const navigate = useNavigate();\n\n  return (\n    <div className={styles.navbar}>\n      <Link to=\"/\">\n        <img src={require('../image/logo.png')} alt=\"Company Logo\" className={styles.imge} />\n      </Link>\n      <Link to=\"/hotel\" className={styles.link}>\n        <h4 className={styles.mystery}>Hotels</h4>\n      </Link>\n      <h4 className={styles.history}>\n        <Link to=\"/property\" className={styles.link}>\n          Properties\n        </Link>\n      </h4>\n      <h4 className={styles.technology}>\n        <Link to=\"/booking\" className={styles.link}>\n          Hotel Bookings\n        </Link>\n      </h4>\n      {token ? (\n        <h4 className={styles.technology} onClick={handleLogout}>\n          Logout\n        </h4>\n      ) : (\n        <h4 className={styles.technology}>\n          <Link to=\"/login\" className={styles.link}>\n            Login/Signup\n          </Link>\n        </h4>\n      )}\n    </div>\n  );\n}\n","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/footer.jsx",[],[],"/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/hotel.jsx",["76","77","78","79"],[],"import React, { useEffect, useState } from 'react';\nimport Navbar from \"../pages/navbar\";\nimport Footer from \"../pages/footer\";\nimport { Divider, Center, Input, FormControl, FormLabel, Flex, Button, CardFooter, Text, Heading, Card, CardBody, SimpleGrid, ButtonGroup, Stack, Image, Select } from '@chakra-ui/react';\nimport styles from \"../pages/hotel.module.css\";\n\n\nfunction Hotel() {\n \n   async function booking(item)\n   {\n    let token=JSON.parse(sessionStorage.getItem(\"token\"));\n    if(token==undefined)\n    {\n      alert(\"Please login first\");\n    }\n    else{\n    let obj={name:item.name,image:item.images[0],beds:item.beds,bathroom:item.bathrooms,price:item.price,rating:item.rating,userid:JSON.parse(localStorage.getItem(\"id\")),address:item.address}\n    const url = `${process.env.REACT_APP_BASEURL}/bookHotel`;\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body:JSON.stringify(obj)\n    };\n    try {\n        const response = await fetch(url, options);\n        if (!response.ok) {\n            alert('Request failed ');\n          }\n      \n        const result = await response.json();\n        alert(result.message);\n      } catch (error) {\n        alert(error);\n      }\n    }\n   }\n\n  const [Place, setPlace] = useState(\"\");\n  const [Checkin, setCheckin] = useState(\"\");\n  const [Checkout, setCheckout] = useState(\"\");\n  const [Adults, setAdults] = useState(0);\n  const [Hotels, setHotels] = useState([]);\n//   const [sort,setsort]=useState(\"\");\n\n  async function handleSrch() {\n    let obj = { location: Place, checkin: Checkin, checkout: Checkout, adults: Adults };\n    console.log(obj);\n    let arr=[];\n    const url = `https://airbnb13.p.rapidapi.com/search-location?location=${Place}&checkin=${Checkin}&checkout=${Checkout}&adults=${Adults}`;\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': `${process.env.REACT_APP_hotel_RapidAPI_Key}`,\n        'X-RapidAPI-Host': 'airbnb13.p.rapidapi.com'\n      }\n    };\n\n    try {\n      const response = await fetch(url, options);\n      const result = await response.json();\n      let hot=result.results;\n       arr = hot.map((item) => (\n        <Card key={item._id} maxW='sm'>\n          <CardBody className={styles.cardbody}>\n            <Image\n              src={item.images[0]}\n              alt='Hotel'\n              borderRadius='lg' className={styles.pht}\n            />\n            <Stack mt='6' spacing='3'>\n              <Heading size='md'>{item.name}</Heading>\n                <Text> No. of beds: {item.beds}</Text>\n               <Text> No. of bathrooms: {item.bathrooms}</Text>\n               <Text>Adress: {item.address}</Text>\n             <Flex justifyContent={\"space-between\"}>\n              <Text color='green.600' fontSize='2xl'>Price: ${item.price.total}</Text>\n              <Text color='green.600' fontSize='2xl'>Rating: {item.rating}</Text>\n              </Flex>\n            </Stack>\n          </CardBody>\n          <Center height='50px'>\n        <Divider />\n      </Center>\n          <CardFooter>\n            <Button variant='solid' colorScheme='green' onClick={()=>\n            {\n               booking(item);\n            }}>\n              Book now\n            </Button>\n          </CardFooter>\n        </Card>\n\n      ));\n      setHotels(arr)\n      \n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <div>\n      <Navbar />\n      <Heading color={\"green\"} marginTop={\"50px\"}>Hotels</Heading>\n      <Center height='100px'>\n        <Divider />\n      </Center>\n     \n      <div className={styles.srch}>\n        <Flex justifyContent=\"space-around\" alignItems=\"center\" direction={{ base: 'column', md: 'column',lg:\"row\" }}  >\n          <FormControl isRequired  w={{base:\"80%\",md:\"80%\",lg:\"17%\"}}>\n            <FormLabel>Hotel Location</FormLabel>\n            <Input placeholder='Enter Hotel Location' onChange={(e) => setPlace(e.target.value)} />\n          </FormControl>\n          <FormControl isRequired w={{base:\"80%\",md:\"80%\",lg:\"17%\"}}>\n            <FormLabel>CheckIn</FormLabel>\n            <Input placeholder=\"Checkin Date and Time\" size=\"md\" type=\"date\" onChange={(e) => setCheckin(e.target.value)} />\n          </FormControl>\n          <FormControl isRequired w={{base:\"80%\",md:\"80%\",lg:\"17%\"}}>\n            <FormLabel>CheckOut</FormLabel>\n            <Input placeholder=\"Checkout Date and Time\" size=\"md\" type=\"date\" onChange={(e) => setCheckout(e.target.value)} />\n          </FormControl>\n          <FormControl isRequired w={{base:\"80%\",md:\"80%\",lg:\"17%\"}}>\n            <FormLabel>Number of Adults</FormLabel>\n            <Input placeholder='Number of Adults' type=\"number\" onChange={(e) => setAdults(e.target.value)} />\n          </FormControl>\n          <Button colorScheme='teal' size='lg' marginTop=\"2%\" onClick={handleSrch}>Search</Button>\n        </Flex>\n        <Center height='50px'>\n          <Divider />\n        </Center>\n      </div>\n      <div className={styles.hotels}>\n        <SimpleGrid spacing={4} templateColumns='repeat(auto-fill, minmax(300px, 1fr))'>\n          {Hotels}\n        </SimpleGrid>\n      </div>\n      <Center height='100px'>\n        <Divider />\n      </Center>\n      <Footer />\n    </div>\n  );\n}\n\nexport default Hotel;\n","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/booking.jsx",["80"],[],"import React, { useEffect, useState } from 'react';\n\nimport { Divider, Center, Text, Card, CardBody, Stack, Heading, Flex, Image,CardFooter,Button,SimpleGrid } from '@chakra-ui/react';\nimport Navbar from \"../pages/navbar\";\nimport Footer from \"../pages/footer\";\nimport styles from \"../pages/hotel.module.css\";\n\nexport default function Booking() {\n    async function cancelbooking(item)\n    {\n       \n        const url = `${process.env.REACT_APP_BASEURL}/cancelbooking`;\n        try{\n           const response=await fetch(url,{\n            method:\"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n              },\n              body:JSON.stringify({id:item._id.$oid})\n           })\n           if (!response.ok) {\n            alert('Request failed ');\n          }\n          const result = await response.json();\n          alert(result.message);\n        }\n        catch(error)\n        {\n            alert(error);\n        }\n\n        \n    }\n     const [arr,setarr]=useState([])\n\n     useEffect(() => {\n        async function fetchData() {\n            if(JSON.parse(sessionStorage.getItem(\"token\")==undefined))\n            {alert(\"Please login first\")}\n            else{\n            try {\n                let response = await fetch(`${process.env.REACT_APP_BASEURL}/booking`,{\n                    method:\"GET\",\n                    headers:{\n                        'Content-Type': 'application/json'\n                    }\n                });\n                if (!response.ok) {\n                    throw new Error(\"Request failed\");\n                }\n                const result = await response.json();\n    \n                // Check if result.message is a string and parse it if necessary\n                let dt = typeof result.message === \"string\" ? JSON.parse(result.message) : result.message;\n                let data = dt.map((item) => (\n                    <Card key={item.id} maxW='sm'>\n          <CardBody className={styles.cardbody}>\n            <Image\n              src={item.image}\n              alt='Hotel'\n              borderRadius='lg' className={styles.pht}\n            />\n            <Stack mt='6' spacing='3'>\n              <Heading size='md'>{item.name}</Heading>\n                <Text> No. of beds: {item.bed}</Text>\n               <Text> No. of bathrooms: {item.bathroom}</Text>\n               <Text>Adress: {item.address}</Text>\n             <Flex justifyContent={\"space-between\"}>\n              <Text color='green.600' fontSize='2xl'>Price: ${item.price.total}</Text>\n              <Text color='green.600' fontSize='2xl'>Rating: {item.rating}</Text>\n              </Flex>\n              <Text color='green.600' fontSize='2xl'>Status: {item.status}</Text>\n            </Stack>\n          </CardBody>\n          <Center height='50px'>\n        <Divider />\n      </Center>\n          <CardFooter>\n          {item.status === 'booked' ? (\n                                <Button variant='solid' colorScheme='green' onClick={()=>\n                                {\n                                    cancelbooking(item);\n                                }}>\n                                    Cancel\n                                </Button>\n                            ) : null}\n          </CardFooter>\n        </Card>\n\n                ));\n    \n                setarr(data);\n            } catch (error) {\n                console.error(error);\n                console.log(\"Error occurred while fetching data\");\n            }\n        }\n        }\n    \n        fetchData();\n    }, []);\n\n    return (\n        <div>\n            <Navbar />\n            <Center height='100px'>\n                <Divider />\n            </Center>\n\n            <SimpleGrid spacing={4} templateColumns='repeat(auto-fill, minmax(300px, 1fr))'>\n          {arr}\n        </SimpleGrid>\n\n            <Center height='100px'>\n                <Divider />\n            </Center>\n            <Footer />\n        </div>\n    );\n}\n","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/property.jsx",["81","82","83","84","85"],[],"import React, { useEffect, useState } from 'react';\nimport Navbar from \"../pages/navbar\";\nimport Footer from \"../pages/footer\";\nimport { Divider, Center, Input, FormControl, FormLabel, Flex, Button, CardFooter, Text, CardHeader, Heading, Card, CardBody, SimpleGrid, ButtonGroup, Stack, Image, Select } from '@chakra-ui/react';\nimport styles from \"../pages/hotel.module.css\";\nimport { Link } from 'react-router-dom'\n\nfunction Property() {\n \n   async function buyNow(item)\n   {\n    let token=JSON.parse(sessionStorage.getItem(\"token\"));\n    if(token==undefined)\n    {\n      alert(\"Please login first\");\n    }\n    else{\n    let obj={image:item.photos[0].href,name:item.branding[0].name,bed:item.description.beds,bathroom:item.description.baths,price:item.list_price,address:`${item.location.address.line} ${item.location.address.city} ${item.location.address.state}`,userid:JSON.parse(localStorage.getItem(\"id\"))}\n    const url = `${process.env.REACT_APP_BASEURL}/buyProperty`;\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body:JSON.stringify(obj)\n    };\n    try {\n        const response = await fetch(url, options);\n        if (!response.ok) {\n            alert('Request failed ');\n          }\n      \n        const result = await response.json();\n        alert(result.message);\n      } catch (error) {\n        alert(error);\n      }\n   }\n  }\n\n  const [Place, setPlace] = useState(\"\");\n\n  const [Hotels, setHotels] = useState([]);\n\n\n  async function handleSrch() {\n    let arr=[];\n    let url = `https://realtor16.p.rapidapi.com/forsale?location=${Place}`;\n    const options = {\n        method: 'GET',\n        headers: {\n            'X-RapidAPI-Key': `${process.env.REACT_APP_property_rapidAPI_Key}`,\n            'X-RapidAPI-Host': 'realtor16.p.rapidapi.com'\n        }\n    };\n    try {\n      const response = await fetch(url, options);\n      const result = await response.json();\n      let hot=result.home_search.results;\n         console.log(hot)\n       arr = hot.map((item) => (\n        \n        <Card key={item.property_id} maxW='sm'>\n          <CardBody className={styles.cardbody}>\n            <Image\n              src={item.photos[0].href}\n              alt='Hotel'\n              borderRadius='lg' className={styles.pht}\n            />\n            <Stack mt='6' spacing='3'>\n              <Heading size='md'>{item.branding[0].name}</Heading>\n                <Text> No. of beds: {item.description.beds}</Text>\n               <Text> No. of bathrooms: {item.description.baths}</Text>\n               <Text>Adress: {item.location.address.line} {item.location.address.city} {item.location.address.state}</Text>\n             {/* <Flex justifyContent={\"space-between\"}> */}\n              <Text color='green.600' fontSize='2xl'>Listing Price: ${item.list_price}</Text>\n              {/* <Text color='green.600' fontSize='2xl'>Agent: {item.source.agents[0].office_name}</Text> */}\n              {/* </Flex> */}\n            </Stack>\n          </CardBody>\n        \n          <CardFooter >\n            <Button variant='solid' colorScheme='green' onClick={()=>\n            {\n               buyNow(item);\n            }} marginLeft={\"35%\"}>\n              Buy now\n            </Button>\n          </CardFooter>\n        </Card>\n\n      ));\n      setHotels(arr)\n      \n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  return (\n    <div>\n      <Navbar />\n      <Heading color={\"green\"} marginTop={\"50px\"}>Properties</Heading>\n      <Flex justifyContent={\"space-around\"} direction={{ base: 'column', md: 'row',lg:\"row\" }}>\n     <Link to=\"/addProperty\"> <Heading color={\"green\"} marginTop={\"50px\"}>Add Property</Heading></Link>\n      <Link to=\"/SeeSelfproperty\"> <Heading color={\"green\"} marginTop={\"50px\"}>Your Property</Heading></Link>\n      </Flex>\n      <Center height='100px'>\n        <Divider />\n      </Center>\n      <div className={styles.srch}>\n        <Flex justifyContent=\"space-around\" alignItems=\"center\" direction={{ base: 'column', md: 'column',lg:\"row\" }}>\n          <FormControl isRequired w={{base:\"80%\",md:\"80%\",lg:\"25%\"}}>\n            <FormLabel>Property Location</FormLabel>\n            <Input placeholder='Enter Property Location' onChange={(e) => setPlace(e.target.value)} />\n          </FormControl>\n        \n          <Button colorScheme='teal' size='lg' marginTop=\"2%\" onClick={handleSrch}>Search</Button>\n      \n        </Flex>\n        <Center height='50px'>\n          <Divider />\n        </Center>\n      </div>\n      <div className={styles.hotels}>\n        <SimpleGrid spacing={4} templateColumns='repeat(auto-fill, minmax(300px, 1fr))'>\n          {Hotels}\n        </SimpleGrid>\n      </div>\n      <Center height='100px'>\n        <Divider />\n      </Center>\n      <Footer />\n    </div>\n  );\n}\n\nexport default Property;\n","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/addProperty.jsx",["86"],[],"import React, { useState } from 'react';\nimport {\n  Input,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Button,\n  Divider,\n  Center,\n  Stack\n} from '@chakra-ui/react';\nimport Navbar from '../pages/navbar';\nimport Footer from '../pages/footer';\n\nimport styles from '../pages/addProperty.module.css';\n\nfunction AddProperty() {\n  const [propertyImage, setPropertyImage] = useState('');\n  const [propertyName, setPropertyName] = useState('');\n  const [beds, setBeds] = useState();\n  const [bathroom, setBathroom] = useState();\n  const [propertyAddress, setPropertyAddress] = useState('');\n  const [propertyPrice, setPropertyPrice] = useState();\n\n  async function addingProperty()\n  {\n    if(JSON.parse(sessionStorage.getItem(\"token\"))==undefined)\n    {\n      alert(\"Please login first!\")\n    }\n    else{\n    const propertyDetail={\"image\":propertyImage,\"name\":propertyName,\"bathroom\":bathroom,\"bed\":beds,\"address\":propertyAddress,\"price\":propertyPrice,\"userId\":JSON.parse(localStorage.getItem(\"id\"))}\n    try {\n        const res = await fetch(`${process.env.REACT_APP_BASEURL}/addproperty`, {\n          method: \"POST\",\n          body: JSON.stringify(propertyDetail),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n    \n        if (res.ok) {\n          const data = await res.json();\n         \n          alert( data.message);\n        } else {\n          const errorData = await res.json();\n          alert(errorData);\n        }\n      } catch (error) {\n        let e=await error.json();\n        alert( e);\n      }\n    \n  }\n}\n\n  return (\n    <div>\n      <Navbar />\n      <Center height='100px'>\n        <Divider />\n      </Center>\n      <div className={styles.container}>\n        <Tabs variant='soft-rounded' colorScheme='green'>\n          <TabList>\n            <Tab>Add Property Details</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <form>\n                <Stack spacing={4}>\n                  <Input\n                    placeholder='Enter Property image url'\n                    size='lg'\n                    value={propertyImage}\n                    onChange={(e) => setPropertyImage(e.target.value)}\n                    fontSize={{base:\"12px\",md:\"20px\"}}\n                 />\n                  <Input\n                    placeholder='Enter Property Name'\n                    size='lg'\n                    value={propertyName}\n                    onChange={(e) => setPropertyName(e.target.value)}\n                    fontSize={{base:\"12px\",md:\"20px\"}}\n                  />\n                  <Input\n                    placeholder='Enter Number Of Beds'\n                    size='lg'\n                    value={beds}\n                    onChange={(e) => setBeds(e.target.value)}\n                    fontSize={{base:\"12px\",md:\"20px\"}}\n                    type='number'\n                  />\n                  <Input\n                    placeholder='Enter Number of Bathrooms'\n                    size='lg'\n                    value={bathroom}\n                    onChange={(e) => setBathroom(e.target.value)}\n                    fontSize={{base:\"12px\",md:\"20px\"}}\n                    type='number'\n                  />\n                  <Input\n                    placeholder='Enter Property Address'\n                    size='lg'\n                    value={propertyAddress}\n                    onChange={(e) => setPropertyAddress(e.target.value)}\n                    fontSize={{base:\"12px\",md:\"20px\"}}\n                  />\n                  <Input\n                    placeholder='Enter Property Price'\n                    size='lg'\n                    value={propertyPrice}\n                    onChange={(e) => setPropertyPrice(e.target.value)}\n                    fontSize={{base:\"12px\",md:\"20px\"}}\n                  />\n                  <Button colorScheme='green' size='lg' onClick={addingProperty}>\n                    Add Property\n                  </Button>\n                </Stack>\n              </form>\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </div>\n      <Center height='100px'>\n        <Divider />\n      </Center>\n      <Footer />\n    </div>\n  );\n}\n\nexport default AddProperty;\n","/Users/rahulsharma/Documents/GitHub/Jagah/frontend/jagah/src/pages/SeeSelfproperty.jsx",["87"],[],"import React, { useEffect, useState } from 'react';\n\nimport { Divider, Center, Text, Card, CardBody, Stack, Heading,  Image, CardFooter, Button, SimpleGrid } from '@chakra-ui/react';\nimport Navbar from \"../pages/navbar\";\nimport Footer from \"../pages/footer\";\nimport styles from \"../pages/hotel.module.css\";\n\nexport default function SeeSelfproperty() {\n    async function DeleteProperty(item) {\n        \n        const url = `${process.env.REACT_APP_BASEURL}/DeleteProperty?propertyId=${item}`;\n        try {\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n            if (!response.ok) {\n                alert('Request failed ');\n            }\n            const result = await response.json();\n            alert(result.message);\n            \n        }\n        catch (error) {\n            alert(error);\n        }\n\n\n    }\n    const [arr, setarr] = useState([])\n\n    useEffect(() => {\n        async function fetchData() {\n            if(JSON.parse(sessionStorage.getItem(\"token\"))==undefined)\n            {\n                alert(\"Please Login First\")\n            }\n            else{\n            try {\n                let userId = JSON.parse(localStorage.getItem('id'));\n                let response = await fetch(`${process.env.REACT_APP_BASEURL}/selfProperty?userId=${userId}`, {\n                    method: \"GET\",\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n                if (!response.ok) {\n                    throw new Error(\"Request failed\");\n                }\n                const result = await response.json();\n\n                // Check if result.message is a string and parse it if necessary\n                let dt = typeof result.message === \"string\" ? JSON.parse(result.message) : result.message;\n               \n                let data = dt.map((item) => (\n                    <Card key={item._id} maxW='sm'>\n                        <CardBody className={styles.cardbody}>\n                            <Image\n                                src={item.image}\n                                alt='Hotel'\n                                borderRadius='lg' className={styles.pht}\n                            />\n                            <Stack mt='6' spacing='3'>\n                                <Heading size='md'>{item.name}</Heading>\n                                <Text> No. of beds: {item.bed}</Text>\n                                <Text> No. of bathrooms: {item.bathroom}</Text>\n                                <Text>Adress: {item.address}</Text>\n                             \n                                    <Text color='green.600' fontSize='2xl'>Price: ${item.price}</Text>\n                               \n                                <Text color='green.600' fontSize='2xl'>Status: {item.status}</Text>\n                            </Stack>\n                        </CardBody>\n\n                        <CardFooter>\n                            <Button variant='solid' colorScheme='green' onClick={() => {\n                                DeleteProperty(item._id.$oid);\n                            }} marginLeft={\"20%\"} marginTop={\"20px\"}>\n                                Delete Property\n                            </Button>\n                        </CardFooter>\n                    </Card>\n\n                ));\n\n                setarr(data);\n            } catch (error) {\n                console.error(error);\n                console.log(\"Error occurred while fetching data\");\n            }\n        }\n    }\n\n        fetchData();\n    }, []);\n\n    return (\n        <div>\n            <Navbar />\n            <Center height='100px'>\n                <Divider />\n            </Center>\n\n            <SimpleGrid spacing={4} templateColumns='repeat(auto-fill, minmax(300px, 1fr))'>\n                {arr}\n            </SimpleGrid>\n\n            <Center height='100px'>\n                <Divider />\n            </Center>\n            <Footer />\n        </div>\n    );\n}\n",{"ruleId":"88","severity":1,"message":"89","line":6,"column":10,"nodeType":"90","messageId":"91","endLine":6,"endColumn":14},{"ruleId":"88","severity":1,"message":"92","line":7,"column":10,"nodeType":"90","messageId":"91","endLine":7,"endColumn":12},{"ruleId":"88","severity":1,"message":"93","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":26},{"ruleId":"88","severity":1,"message":"94","line":4,"column":127,"nodeType":"90","messageId":"91","endLine":4,"endColumn":138},{"ruleId":"88","severity":1,"message":"95","line":4,"column":154,"nodeType":"90","messageId":"91","endLine":4,"endColumn":160},{"ruleId":"96","severity":1,"message":"97","line":13,"column":13,"nodeType":"98","messageId":"99","endLine":13,"endColumn":15},{"ruleId":"96","severity":1,"message":"97","line":38,"column":58,"nodeType":"98","messageId":"99","endLine":38,"endColumn":60},{"ruleId":"88","severity":1,"message":"93","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":26},{"ruleId":"88","severity":1,"message":"100","line":4,"column":90,"nodeType":"90","messageId":"91","endLine":4,"endColumn":100},{"ruleId":"88","severity":1,"message":"94","line":4,"column":139,"nodeType":"90","messageId":"91","endLine":4,"endColumn":150},{"ruleId":"88","severity":1,"message":"95","line":4,"column":166,"nodeType":"90","messageId":"91","endLine":4,"endColumn":172},{"ruleId":"96","severity":1,"message":"97","line":13,"column":13,"nodeType":"98","messageId":"99","endLine":13,"endColumn":15},{"ruleId":"96","severity":1,"message":"97","line":29,"column":51,"nodeType":"98","messageId":"99","endLine":29,"endColumn":53},{"ruleId":"96","severity":1,"message":"97","line":36,"column":59,"nodeType":"98","messageId":"99","endLine":36,"endColumn":61},"no-unused-vars","'name' is assigned a value but never used.","Identifier","unusedVar","'id' is assigned a value but never used.","'useEffect' is defined but never used.","'ButtonGroup' is defined but never used.","'Select' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CardHeader' is defined but never used."]